---
apiVersion: v1
kind: Namespace
metadata:
  name: pg-rest

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: minikube-pv-hack
  namespace: pg-rest
spec:
  selector:
    matchLabels:
      name: minikube-pv-hack
  template:
    metadata:
      labels:
        name: minikube-pv-hack
    spec:
      terminationGracePeriodSeconds: 0
      containers:
        - name: minikube-pv-hack
          image: registry.access.redhat.com/ubi8:latest
          command:
            - bash
            - -c
            - |
              while : ; do
                chmod 777 /target/*
                sleep 1
              done
          volumeMounts:
            - name: host-vol
              mountPath: /target
      volumes:
        - name: host-vol
          hostPath:
            path: /tmp/hostpath-provisioner/pg-rest

---
apiVersion: v1
kind: Secret
metadata:
  name: aws-creds
  namespace: pg-rest
type: Opaque
data:
  ACCESS_KEY_ID: QUlQSVNUSUxSVjNBQTNZVA==
  ACCESS_SECRET_KEY: NUJIMlAwUlBZUlRNSlZZVDRaUDRTMVZUQkZEWVBJRkU=
immutable: false

---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: pg
  namespace: pg-rest
spec:
  instances: 1
  description: "Test cluster with 3 instances with image"
  imageName: ghcr.io/cloudnative-pg/postgresql:14
  imagePullPolicy: IfNotPresent
  logLevel: trace
  walStorage:
    storageClass: standard
    size: 128Mi
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
  storage:
    size: 1Gi
    storageClass: standard
    resizeInUseVolumes: true
  monitoring:
    enablePodMonitor: true
  bootstrap:
    recovery:
      source: pg
      recoveryTarget:
        targetTime: "2024-08-30 03:00:00.00000+00"
  externalClusters:
    - name: pg
      barmanObjectStore:
        endpointURL: "http://minio.s3.svc"
        destinationPath: "s3://backups"
        s3Credentials:
          accessKeyId:
            name: aws-creds
            key: ACCESS_KEY_ID
          secretAccessKey:
            name: aws-creds
            key: ACCESS_SECRET_KEY
